.. _kafka-mongodb-aws:

================================
MongoDB AWS-based Authentication
================================

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :keywords: AWS, IAM, credentials

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to authenticate your {+connector+} with your
MongoDB replica set using the ``MONGODB-AWS`` authentication mechanism.
The ``MONGODB-AWS`` authentication mechanism uses your Amazon Web
Services Identity and Access Management (AWS IAM) credentials to authenticate
your user.

To learn how to set up your MongoDB replica set in MongoDB Atlas to use
AWS IAM credentials, see the guide on :atlas:`How to Set Up Unified AWS Access </security/set-up-unified-aws-access/>`.

.. important::

   You must use {+connector+} version 1.5 of later to connect to a {+cluster+}
   set up to authenticate using your AWS IAM credentials. AWS IAM
   credential authentication is available in MongoDB server version 4.4
   and later.

Connector Connection Settings
-----------------------------

You can specify your ``MONGODB-AWS`` authentication credentials in your
connection URI connector property as shown in the following example:

.. code-block:: ini

   connection.uri=mongodb://<AWS access key id>:<AWS secret access key>@<hostname>:<port>/?authSource=<authentication database>&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<AWS session token>

The preceding example uses the following placeholders which you must
replace:

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Placeholder
     - Description

   * - **AWS access key id**
     - Value of your ``AWS_ACCESS_KEY_ID``.

   * - **AWS secret access key**
     - Value of your ``AWS_SECRET_KEY``.

   * - **hostname**
     - Network address of your MongoDB server.

   * - **port**
     - Port number of your MongoDB server.

   * - **authentication database**
     - MongoDB database that contains your user's authentication data. If
       you omit the ``authSource`` parameter and placeholder value, the
       driver uses the default value ``admin``.

   * - **AWS session token**
     - | Value of your ``AWS_SESSION_TOKEN``. If you do not need to specify an
         AWS session token, omit the ``authMechanismProperties`` parameter
         and placeholder value.
       | *Optional*

Custom Authentication Provider
------------------------------

You can add a custom authentication provider by implementing the
``com.mongodb.kafka.connect.util.custom.credentials.CustomCredentialProvider``
interface. To enable this feature, set the following authentication
properties:

- ``mongo.custom.auth.mechanism.enable``: set to ``true``
- ``mongo.custom.auth.mechanism.providerClass``: set to the qualified
  class name of the implementation class

Depending on the design of your implementation class, you might also
need to set the ``mongodbaws.auth.mechanism.roleArn`` property, which
provides the Amazon Resource Name (ARN).

Example
~~~~~~~

This section provides a sample authentication provider implementation
class and the corresponding configuration properties and values to
implement the provider.

The following code specifies the configuration properties to use the
``MONGODB-AWS`` authentication method and add a custom authentication
provider:

.. code-block:: ini

   connection.uri=<connection string>/?authMechanism=MONGODB-AWS
   mongo.custom.auth.mechanism.enable=true
   mongo.custom.auth.mechanism.providerClass=sample.AwsAssumeRoleCredentialProvider
   mongodbaws.auth.mechanism.roleArn=arn:aws:iam::<account ID>:role/<role name>

In this example, the ``sample.AwsAssumeRoleCredentialProvider``
implementation class must be available on the classpath. Your
authentication provider reads the ARN you specify.

The following code defines the ``AwsAssumeRoleCredentialProvider``
class:

.. code-block:: java

   public class AwsAssumeRoleCredentialProvider implements CustomCredentialProvider {
   
     public AwsAssumeRoleCredentialProvider() {}
     @Override
     public MongoCredential getCustomCredential(Map<?, ?> map) {
       AWSCredentialsProvider provider = new DefaultAWSCredentialsProviderChain();
       Supplier<AwsCredential> awsFreshCredentialSupplier = () -> {
         AWSSecurityTokenService stsClient = AWSSecurityTokenServiceAsyncClientBuilder.standard()
             .withCredentials(provider)
             .withRegion("us-east-1")
             .build();
         AssumeRoleRequest assumeRoleRequest = new AssumeRoleRequest().withDurationSeconds(3600)
             .withRoleArn((String)map.get("mongodbaws.auth.mechanism.roleArn"))
             .withRoleSessionName("Test_Session");
         AssumeRoleResult assumeRoleResult = stsClient.assumeRole(assumeRoleRequest);
         Credentials creds = assumeRoleResult.getCredentials();
         // Add your code to fetch new credentials
         return new AwsCredential(creds.getAccessKeyId(), creds.getSecretAccessKey(), creds.getSessionToken());
       };
       return MongoCredential.createAwsCredential(null, null)
           .withMechanismProperty(MongoCredential.AWS_CREDENTIAL_PROVIDER_KEY, awsFreshCredentialSupplier);
     }
   
     @Override
     public void validate(Map<?, ?> map) {
       String roleArn = (String) map.get("mongodbaws.auth.mechanism.roleArn");
       if (StringUtils.isNullOrEmpty(roleArn)) {
         throw new RuntimeException("Invalid value set for customProperty");
       }
     }
   
     @Override
     public void init(Map<?, ?> map) {
   
     }
   }

To view an example of a ``pom.xml`` file that can build the complete JAR containing
the implementation class, see the `Kafka Connector GitHub repository
README file
<https://github.com/mongodb/mongo-kafka/blob/master/README.md#pom-file-to-build-the-sample-customroleprovider-into-a-jar>`__.
