.. _kafka-source-json-formatters:

===============
JSON Formatters
===============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Overview
--------

In this guide, you can learn how to specify built-in JSON formatter
classes or write a custom formatter class to use in a
{+source-connector+}.

JSON Formatters
---------------

**JSON formatters** specify how JSON data appears. They provide instructions
for how the connector represents different types in output.

Built-In Formatters
-------------------

The following table describes the formatter classes available in the
source connector:

.. list-table::
   :header-rows: 1
   :widths: 60 40

   * - Class
     - Description

   * - ``com.mongodb.kafka.connect.source.json.formatter.DefaultJson``
     - The legacy strict JSON formatter.

   * - ``com.mongodb.kafka.connect.source.json.formatter.ExtendedJson``
     - The fully type-safe extended JSON formatter.

   * - ``com.mongodb.kafka.connect.source.json.formatter.SimplifiedJson``
     - The simplified JSON formatter. This formatter class represents
       ``ObjectId``, ``Decimal``, ``Date``, and ``Binary`` values as
       strings.

Examples
--------

The following table describes the fields of the sample document that the
examples in this guide use to demonstrate each output format. The
columns describe the field name, value, and type for each field or
nested field.

.. list-table::
   :header-rows: 1
   :widths: 25 45 30

   * - Name
     - Value
     - Type

   * - ``_id``
     - .. code-block:: sh
          :copyable: false
          
          ObjectId('5f15aab12435743f9bd126a4')

       .. code-block:: sh
          :copyable: false
         
          "$oid": "5f15aab12435743f9bd126a4"

     - ``ObjectID`` (``$oid``)

   * - ``w``
     - .. code-block:: sh
          :copyable: false
      
          [ Decimal128('12345.6789'), 23.53 ]

     - | Array of:
       | - ``Decimal128`` (``$numberDecimal``)
       | - ``Double`` (``$numberDouble``)

   * - ``x``
     - .. code-block:: sh
          :copyable: false
      
          BinData(0, 'SSBsb3ZlIGZvcm1hdHRpbmch')

       .. code-block:: sh
          :copyable: false
         
          "$binary": {
             "base64": "SSBsb3ZlIGZvcm1hdHRpbmch",
             "subType": "00"
          }

     - ``Binary`` (``$binary``)

   * - ``y``
     - .. code-block:: sh
          :copyable: false
         
          new Date('2023-05-11T08:27:07.000Z')

       .. code-block:: sh
          :copyable: false
         
          "$date": "1683793627000"

     - ``Date`` (``$date``)

   * - ``z``
     - .. code-block:: sh
          :copyable: false
         
          { a: false, b: 87, c: "hello world" }
          
     - | Document with fields:
       | - ``a``: ``Boolean``
       | - ``b``: ``Int32`` (``$numberInt``)
       | - ``c``: ``String``

Default JSON Formatter
~~~~~~~~~~~~~~~~~~~~~~

In your source connector configuration properties, set the following
property to specify the default JSON formatter:

.. code-block:: json

   "output.json.formatter": "com.mongodb.kafka.connect.source.json.formatter.DefaultJson"

When you output the sample document contents from your Kafka topic, the
output will resemble the following:

.. code-block:: json
   
   { 
      "_id": {"$oid": "5f15aab12435743f9bd126a4"},
      "w": [{"$numberDecimal": "12345.6789"}, 23.53],
      "x": {"$binary": "SSBsb3ZlIGZvcm1hdHRpbmch", "$type": "00"},
      "y": {"$date": 1683793627000},
      "z": {"a": false, "b": 87, "c": "hello world"}
   }

Extended JSON Formatter
~~~~~~~~~~~~~~~~~~~~~~~

In your source connector configuration properties, set the following
property to specify the extended JSON formatter:

.. code-block:: json

   "output.json.formatter": "com.mongodb.kafka.connect.source.json.formatter.ExtendedJson"

When you output the sample document contents from your Kafka topic, the
output will resemble the following:

.. code-block:: json
   
   { 
      "_id": {"$oid": "5f15aab12435743f9bd126a4"},
      "w": [{"$numberDecimal": "12345.6789"}, {"$numberDouble": "23.53"}],
      "x": {"$binary": "SSBsb3ZlIGZvcm1hdHRpbmch", "$type": "00"},
      "y": {"$date": 1683793627000},
      "z": {"a": false, "b": {"$numberInt": "87"}, "c": "hello world"}
   }

Simplified JSON Formatter
~~~~~~~~~~~~~~~~~~~~~~~~~

In your source connector configuration properties, set the following
property to specify the simplified JSON formatter:

.. code-block:: json

   "output.json.formatter": "com.mongodb.kafka.connect.source.json.formatter.SimplifiedJson"

When you output the sample document contents from your Kafka topic, the
output will resemble the following:

.. code-block:: json
   
   { 
      "_id": "5f15aab12435743f9bd126a4",
      "w": ["12345.6789", 23.53],
      "x": "SSBsb3ZlIGZvcm1hdHRpbmch",
      "y": "2023-05-11T08:27:07Z",
      "z": {"a": false, "b": 87, "c": "hello world"}
   }

Custom JSON Formatter
---------------------

If none of the built-in JSON formatters fit your use-case, you can
create your own formatter class and add it to the connector classpath.

Sample Custom JSON Formatter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In addition to the string conversions performed by the simplified JSON
formatter, this custom JSON formatter, called ``EverythingToStringJson``, also
represents the following types as strings:

- ``Int32``
- ``Int64``
- ``Boolean``
- ``Double``
- ``null``
- ``undefined``

.. code-block:: java
   
   /**
    * Custom JSON formatter
    *
    * This class represents most non-string types as strings.
    */

   public class EverythingToStringJson implements JsonWriterSettingsProvider {
   
     @Override
     public JsonWriterSettings getJsonWriterSettings() {
       return JsonWriterSettings.builder()
           .outputMode(JsonMode.RELAXED)
           .binaryConverter(
               (value, writer) ->
                   writer.writeString(Base64.getEncoder().encodeToString(value.getData())))
           .dateTimeConverter(
               (value, writer) -> {
                 ZonedDateTime zonedDateTime = Instant.ofEpochMilli(value).atZone(ZoneOffset.UTC);
                 writer.writeString(DateTimeFormatter.ISO_DATE_TIME.format(zonedDateTime));
               })
           .decimal128Converter((value, writer) -> writer.writeString(value.toString()))
           .objectIdConverter((value, writer) -> writer.writeString(value.toHexString()))
           .symbolConverter((value, writer) -> writer.writeString(value))
           .int32Converter((value, writer) -> writer.writeString(value.toString()))
           .int64Converter((value, writer) -> writer.writeString(value.toString()))
           .doubleConverter((value, writer) -> writer.writeString(value.toString()))
           .booleanConverter((value, writer) -> writer.writeString(value.toString()))
           .nullConverter((value, writer) -> writer.writeString(value.toString()))
           .undefinedConverter((value, writer) -> writer.writeString(value.toString()))
           .build();
     }
   }

How to Install Your Formatter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To configure your source connector to use a custom JSON formatter, you must
complete the following steps:

1. Compile the custom JSON formatter class to a JAR file.

#. Add the compiled JAR to the classpath/plugin path for your Kafka workers.
   To learn more about plugin paths, see the
   `Confluent documentation <https://docs.confluent.io/current/connect/managing/community.html>`__.

   .. note::

      Kafka Connect loads plugins in isolation. When you deploy a custom
      formatter, both the connector JAR and the formatter
      JAR must be on the same path. Your paths should resemble the following:

      | ``<plugin.path>/mongo-kafka-connect/mongo-kafka-connect-all.jar``
      | ``<plugin.path>/mongo-kafka-connect/custom-json-formatter.jar``

      To learn more about {+kafka-connect+} plugins, see
      `this guide from Confluent <https://docs.confluent.io/home/connect/userguide.html#installing-kconnect-plugins>`__.

#. Specify your custom class in the
   ``output.json.formatter`` configuration setting.

To learn how to compile a class to a JAR file, see the
`JAR deployment guide <https://docs.oracle.com/javase/tutorial/deployment/jar/build.html>`__
from the Java SE documentation.
